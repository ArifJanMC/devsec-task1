---
- name: System Configuration and Security Playbook
  hosts: all
  become: yes
  vars:
    ssh_port: 2222  # Custom SSH port
    domain_name: "{{ domain | default('example.com') }}"  # Domain for Let's Encrypt
  
  tasks:
    # 1. Update all packages
    - name: Update apt cache (Debian/Ubuntu)
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"
      
    - name: Update all packages
      package:
        name: "*"
        state: latest
      register: package_update
      
    # 2. Configure SSH
    - name: Change SSH port
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?Port\s+\d+'
        line: "Port {{ ssh_port }}"
        validate: '/usr/sbin/sshd -t -f %s'
      register: ssh_config_changed

    - name: Disable password authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication\s+(yes|no)'
        line: 'PasswordAuthentication no'
        validate: '/usr/sbin/sshd -t -f %s'
      register: ssh_config_changed

    - name: Enable key-based authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PubkeyAuthentication\s+(yes|no)'
        line: 'PubkeyAuthentication yes'
        validate: '/usr/sbin/sshd -t -f %s'
      register: ssh_config_changed

    - name: Restart SSH service if config changed
      service:
        name: sshd
        state: restarted
      when: ssh_config_changed.changed

    # 3. Configure firewall
    - name: Install firewall (UFW for Debian/Ubuntu)
      package:
        name: ufw
        state: present
      when: ansible_os_family == "Debian"
      
    - name: Check UFW status (Debian/Ubuntu)
      command: ufw status
      register: ufw_status
      changed_when: false
      when: ansible_os_family == "Debian"

    - name: Enable UFW firewall if disabled (Debian/Ubuntu)
      command: ufw --force enable
      when: 
        - ansible_os_family == "Debian"
        - '"Status: inactive" in ufw_status.stdout'

    - name: Block HTTP (port 80) - UFW
      ufw:
        rule: deny
        port: '80'
        proto: tcp
      when: ansible_os_family == "Debian"

    - name: Allow HTTPS (port 443) - UFW
      ufw:
        rule: allow
        port: '443'
        proto: tcp
      when: ansible_os_family == "Debian"

    - name: Allow SSH on custom port - UFW
      ufw:
        rule: allow
        port: '{{ ssh_port }}'
        proto: tcp
      when: ansible_os_family == "Debian"

    # 4. Set permissions
    - name: Set permissions for root directory
      file:
        path: /
        owner: root
        group: root
        mode: '0700'

    - name: Set permissions for /etc/shadow
      file:
        path: /etc/shadow
        owner: root
        group: root
        mode: '0600'

    # 5. Create test_user and set resource limits
    - name: Create test_user
      user:
        name: test_user
        state: present

    - name: Configure limits.conf for test_user
      lineinfile:
        path: /etc/security/limits.conf
        line: "test_user hard nofile 3"
        state: present

    - name: Ensure pam_limits.so is enabled in common-session
      lineinfile:
        path: /etc/pam.d/common-session
        line: "session required pam_limits.so"
        state: present

    - name: Test user limits (verify)
      become: yes
      become_user: test_user
      shell: |
        # First check the hard limit
        echo "Hard limit: $(ulimit -Hn)"
        
        # Try opening files up to the limit
        for i in $(seq 1 3); do
          exec {fd}<>/tmp/test_file_$i || { echo "Failed to open file $i"; exit 1; }
          echo "Opened file descriptor $fd"
        done
        
        # Try opening one more file beyond the limit
        if exec {fd}<>/tmp/test_file_4; then
          echo "Limit doesn't work - Could open more than 3 files"
          exit 1
        else
          echo "Limit works - Cannot open more than 3 files"
          exit 0
        fi
      register: limit_test
      changed_when: false
      ignore_errors: yes

    # 6. Install nginx and curl
    - name: Install nginx and curl
      package:
        name:
          - nginx
          - curl
        state: present
      register: nginx_install

    - name: Start and enable nginx
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Create test HTML page
      copy:
        content: "<html><body><h1>Nginx Test Page</h1><p>Test successful!</p></body></html>"
        dest: /var/www/html/index.html
        owner: root
        group: root
        mode: '0644'

    - name: Test HTTP request with curl
      shell: curl -s http://localhost
      register: http_test
      changed_when: false

    - name: Display HTTP test result
      debug:
        var: http_test.stdout

    # 7. Let's Encrypt certificate setup (additional task)
    - name: Install certbot
      apt:
        name: 
          - certbot
          - python3-certbot-nginx
        state: present
      when: ansible_os_family == "Debian"

    - name: Obtain SSL certificate with Let's Encrypt
      command: >
        certbot --nginx --agree-tos --non-interactive 
        -d {{ domain_name }} --email admin@{{ domain_name }}
      register: certbot_result
      changed_when: certbot_result.rc == 0
      failed_when: false
      
    - name: Test HTTPS request with curl
      shell: curl -k -s https://localhost
      register: https_test
      changed_when: false
      failed_when: false

    # Description of applications
    - name: Describe nginx and curl functionality
      debug:
        msg: |
          === Application Descriptions ===
          
          Nginx:
          - Web server, reverse proxy, and load balancer
          - Used to serve web content and handle HTTP/HTTPS requests
          - Can proxy requests to other services
          - Provides TLS/SSL encryption capabilities
          
          curl:
          - Command-line tool for transferring data with URLs
          - Supports multiple protocols (HTTP, HTTPS, FTP, etc.)
          - Used for testing web server connectivity and responses
          - Can send/receive data and headers, follow redirects, etc.

    # Generate final report
    - name: Generate execution report
      debug:
        msg: |
          === System Configuration and Security Report ===
          
          1. Package updates: {{ 'Successful' if package_update.changed else 'No updates needed' }}
          
          2. SSH Configuration:
             - SSH port changed to: {{ ssh_port }}
             - Password authentication: Disabled
             - Key-based authentication: Enabled
          
          3. Firewall Status:
             - Firewall enabled: {{ 'Yes' if (ansible_os_family == "Debian" and "Status: active" in ufw_status.stdout) else 'No' }}
             - HTTP (port 80): Blocked
             - HTTPS (port 443): Allowed
          
          4. Permissions:
             - Root directory: Owner-only access (0700)
             - /etc/shadow: Root-only read/write (0600)
          
          5. User Limits (test_user):
             - Max open files: 3
             - Limit test: {{ 'Working' if 'Limit works' in limit_test.stdout else 'Not working' }}
          
          6. Application Installation:
             - nginx: Installed and running
             - curl: Installed
             - HTTP test: {{ 'Successful' if http_test.stdout else 'Failed' }}
          
          7. Let's Encrypt Certificate:
             - Domain: {{ domain_name }}
             - Status: {{ 'Configured' if certbot_result.rc == 0 else 'Not configured or failed' }}
             - HTTPS test: {{ 'Successful' if https_test is defined and https_test.stdout else 'Not performed or failed' }}